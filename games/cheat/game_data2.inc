; Using background color $72, FG $08

blue_playfield1_left:
	.byte $00,$00,$00,$00,$00,$00,$00,$00
	.byte $00,$00,$00,$38,$7C,$FC,$FE,$FF
	.byte $FF,$FF,$FF,$FF,$F7,$07,$77,$77
	.byte $77,$77,$77,$77,$07,$FF,$FE,$FE
	.byte $00,$18,$18,$18,$18,$18,$18,$18
	.byte $18,$18,$08,$08,$08,$00,$00,$00
	.byte $00,$00,$00,$00,$00,$00,$00,$00
	.byte $00,$00,$00,$00,$00,$00,$00,$00
	.byte $00,$00,$00,$00,$00,$00,$00,$00
	.byte $00,$00,$00,$00,$00,$00,$00,$00
	.byte $00,$00,$00,$00,$00,$00,$00,$00
	.byte $00,$00,$00,$00

blue_playfield2_left:
	.byte $00,$00,$00,$00,$09,$0B,$0F,$0F
	.byte $0F,$0F,$0F,$0F,$0E,$06,$03,$03
	.byte $03,$03,$03,$03,$03,$03,$03,$03
	.byte $01,$01,$01,$01,$00,$00,$00,$00
	.byte $00,$00,$00,$00,$00,$00,$E0,$A0
	.byte $00,$F0,$F0,$F0,$78,$78,$78,$78
	.byte $F8,$F8,$FC,$FC,$F0,$EC,$1C,$FC
	.byte $F8,$F8,$F8,$F8,$F0,$F0,$F0,$F0
	.byte $E0,$E0,$50,$50,$50,$50,$50,$50
	.byte $10,$F0,$50,$10,$50,$50,$50,$48
	.byte $48,$48,$48,$08,$08,$08,$00,$00
	.byte $00,$00,$00,$00

;.align $100  ; large here

blue_playfield0_right:
	.byte $00,$00,$00,$00,$00,$00,$80,$00
	.byte $00,$00,$00,$00,$00,$00,$00,$00
	.byte $00,$00,$00,$00,$00,$00,$00,$00
	.byte $00,$00,$00,$00,$00,$00,$00,$00
	.byte $00,$00,$00,$00,$00,$00,$00,$00
	.byte $00,$00,$00,$10,$10,$30,$20,$20
	.byte $30,$30,$30,$70,$30,$40,$70,$70
	.byte $70,$30,$30,$30,$30,$30,$10,$10
	.byte $00,$00,$10,$10,$10,$10,$10,$10
	.byte $10,$10,$10,$10,$10,$20,$20,$20
	.byte $20,$20,$20,$20,$20,$20,$20,$00
	.byte $00,$00,$00,$00

blue_playfield1_right:
	.byte $00,$00,$00,$00,$00,$E0,$61,$20
	.byte $20,$20,$20,$70,$70,$70,$70,$00
	.byte $A6,$A6,$FF,$FF,$FF,$F6,$6F,$6F
	.byte $6F,$6F,$6F,$69,$69,$69,$69,$69
	.byte $69,$69,$69,$69,$69,$69,$60,$26
	.byte $06,$06,$0F,$0F,$0F,$0F,$0F,$0F
	.byte $06,$00,$00,$00,$00,$00,$00,$00
	.byte $00,$00,$00,$00,$00,$00,$00,$00
	.byte $00,$00,$00,$00,$00,$00,$00,$00
	.byte $00,$00,$00,$00,$00,$00,$00,$00
	.byte $00,$00,$00,$00,$00,$00,$00,$00
	.byte $00,$00,$00,$00

blue_playfield2_right:
	.byte $00,$00,$00,$00,$00,$07,$06,$04
	.byte $04,$04,$04,$0E,$0E,$0E,$0E,$00
	.byte $0A,$0A,$0F,$0F,$0F,$0F,$06,$06
	.byte $06,$06,$06,$06,$06,$06,$06,$06
	.byte $06,$06,$06,$06,$06,$06,$02,$00
	.byte $00,$00,$00,$00,$00,$00,$00,$00
	.byte $00,$00,$00,$00,$00,$00,$00,$00
	.byte $00,$00,$00,$00,$00,$00,$00,$00
	.byte $00,$00,$00,$00,$00,$00,$00,$00
	.byte $00,$00,$00,$00,$00,$00,$00,$00
	.byte $00,$00,$00,$00,$00,$00,$00,$00
	.byte $00,$00,$00,$00


cheat_sprite_yellow:
	.byte $00
	.byte $00
	.byte $7D
	.byte $3F
	.byte $7E
	.byte $7F
	.byte $7D
	.byte $7F
	.byte $3E
	.byte $57
	.byte $FC

cheat_sprite_black:
	.byte $00
	.byte $00
	.byte $0A
	.byte $00
	.byte $04
	.byte $01
	.byte $0B
	.byte $02
	.byte $04
	.byte $A2
	.byte $04


score_bitmap0:  ; turns out this was same pattern
score_zeros:    .byte $22,$55,$55,$55,$55,$55,$22,$00
score_ones:     .byte $22,$66,$22,$22,$22,$22,$77,$00
score_twos:     .byte $22,$55,$11,$22,$44,$44,$77,$00
score_threes:   .byte $22,$55,$11,$22,$11,$55,$22,$00
score_fours:    .byte $55,$55,$55,$77,$11,$11,$11,$00

; --****** ----**-- --****** ----**-- ----**--
; --**---- --**--** ------** --**--** --**--**
; --****-- --**---- ------** --**--** --**--**
; ------** --****-- ----**-- ----**-- ----****
; ------** --**--** --**---- --**--** ------**
; --**--** --**--** --**---- --**--** --**--**
; ----**-- ----**-- --**---- ----**-- ----**--

score_fives:    .byte   $77,$44,$66,$11,$11,$55,$22,$00
score_sixes:    .byte   $33,$44,$44,$66,$55,$55,$22,$00
score_sevens:   .byte   $77,$11,$11,$22,$44,$44,$44,$00
score_eights:   .byte   $22,$55,$55,$22,$55,$55,$22,$00
score_nines:    .byte   $22,$55,$55,$33,$11,$55,$22,$00





;=========================================
; sound effects
; doesn't need to be aligned?

sfx_f:
sfx_start:
	.byte	0, 26	; collide
sfx_collide:
	.byte	0, 12, 12, 12, 12, 12, 12, 12, 12	; zap
sfx_zap:
	.byte	0,22,22,23,23,24,24,25,25,26,26,27,28,29,30,31 ; collect
sfx_collect:
	.byte	0, 0, 0, 1, 1, 2, 2, 3, 3 ; speed
sfx_speed:
	.byte	0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8 ; ping
sfx_ping:
;	.byte	0,26,26,26,26,26,26,26,29,29,29,29,29,29,29 ; game over
	.byte	0,26,26,26,26,26,26
sfx_game_over:

sfx_cv:
	.byte	0,$8F	; collide
	.byte	0,$3F,$3F,$3F,$3F,$3F,$3f,$3f,$3f	; zap
	.byte	0,$7f,$7f,$7f,$7f,$7f,$7f,$7f
	.byte	  $7f,$7f,$7f,$7f,$7f,$7f,$7f,$7f ; collect
	.byte	0,$6f,$6f,$6f,$6f,$6f,$6f,$6f,$6f ; speed
	.byte	0,$41,$42,$43,$44,$45,$46,$47,$48
	.byte	  $49,$4a,$4b,$4c,$4d,$4e,$4f ; ping
	.byte	0,$7f,$7f,$7f,$7f,$7f,$7f,$7f
	.byte	  0,$E0,$E0,$E0,$E0,$E0,$EF ; game over

; F, C/V
; collide V=F, C=8, F=31    (8,26)
; zap =   V=F, C=3, F=12
; collect V=F, C=6, F=2		; not really
; die	  V=F, C=8, F=24
; level over V=G,  7/26 1/29
; click  V=F C=15, F=26
SFX_COLLIDE	=	sfx_collide-sfx_start-1
SFX_ZAP		=	sfx_zap-sfx_start-1
SFX_COLLECT	=	sfx_collect-sfx_start-1
SFX_SPEED	=	sfx_speed-sfx_start-1
SFX_PING	=	sfx_ping-sfx_start-1
SFX_CLICK	=	sfx_game_over-sfx_start-1
