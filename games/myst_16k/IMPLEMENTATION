Writing this up because I took a 1-year break on this and now forgot
how it all works and am having to re-learn my own code.  Fun!

ROM/RAM layout:
~~~~~~~~~~~~~~~

  Mapper:
  ~~~~~~~
	Uses the E7 ROM mapper which provides 16K of bank-switched ROM
	and 2k of bank-switched RAM, accessible through a 4k address range.
	Fancy, but there in theory were games that used this mapper back
	in the day (Burgertime being the most famous example).

	$1000-$17FF (2k) one of six 2K ROM banks or 1K or RAM can be mapped here
	$1800-$19FF (512B) one of four 256B RAM banks can be mapped here
	$1A00-$1FFF (1.5k) fixed as the last chunk of ROM

	$1FE0 - $1FE6 selects bank 0 through 6 of the ROM into $1000-$17FF
	$1FE7 enables 1K of the 2K RAM there instead
              When RAM, enabled there's 1k available:
                    $1000-$13FF used to write RAM
		    $1400-$17FF used to read RAM

	$1800-$19FF is also RAM (4 banks of 256B)
		$1800-$18FF is write
		$1900-$19FF is read  
	$1FE8 - $1FEB selects which of four 256B banks

   Myst layout:
	ROM BANK0	-- level data
	ROM BANK1	-- level data
	ROM BANK2	-- level data
	ROM BANK3	-- level data
	ROM BANK4	-- level data
	ROM BANK5	-- unused (will be level data)
	ROM BANK6	-- title, intro and books?
	ROM BANK7	-- always mapped, engine and routines

  Having the E7 detected properly by emulators:
	MAME checks for "lda $FFE5" somewhere in code? (double check this)
	I'm setting $E7 in the IRQ vector (for reasons?)


Zero Page Layout (on VCS this is *all* of the stock RAM)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	
	$80-$8F : various variables
	$90-$9F : more variables
	$A0-$AF : level data area
	$B0-$BF : variables for ZX02 decompression
	$C0-$DF : currently unused
	$E0-$EF	: holds sprite for current pointer (hand or page)
	$F0-$FF : reserved for stack


Build Process
~~~~~~~~~~~~~
	Each bank of the ROM built separately.  They all need the origin
		to be $1000 except for the always-there ROM which is at
		$1A00
	Then it is all merged together.  "myst.s" does this by binary
		including the files, including padding for the 512 bytes
		that can't be accessed.  Probably could have written
		a linker script to do this instead.


Decompression:
~~~~~~~~~~~~~~

	Uses ZX02 compression by Einar Saukas
		and decompression code by DMSC

	Modified, so that when it reads from previously written-out data
		it uses the proper read address (offset by 1k) since
		the hack that makes E7 mappers work has separate address
		ranges for read/write

	Modified, as it takes too long to finish in [lookup numbers] cycles 
		(more than a 60Hz frame) and we're responsible
		for doing the VSYNC and if we don't the display
		glitches).  So we set up a timer to break up
		the decompression across frames so we still sync.
		Otherwise the screen glitches horribly


Clickable/Grabbable/Action Items:
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	Specify the range of the screen to be grabbable in the level data

	Note, the x-coords are 0-159 not 0-39 as you might expect

	If things are clicked, 
		Levels 0..7 = assume it's a marker switch and handle
		Levels 8..11 = assume it's a book location and handle
			TODO:
				red_book_close: handle page vs not
				blue_book_close: handle page vs not
				behind_fireplace: handle page vs not

	TODO:
		other locations:
			inside_fireplace:	button in fireplace
			clock_s:		going to puzzle
			library_nw:		door open
			library_ne:		door close
			library_n:		grab book
			atrus:			end game

Book Implementation:
~~~~~~~~~~~~~~~~~~~~
	Common routines for drawing books as there are many of them

	Extra code for drawing people inside of books, not totally complete



Level Engine:
~~~~~~~~~~~~~

	Load level routine loads level.  Which level to load is in
		zero page CURRENT_LOCATION

	Source is found by using CURRENT_LOCATION to look up 
		source rom bank and address
		This is packed with top 3 bits bank, bottom 13 bits adr

	Copies 256 bytes of data (max we allow) to the $1800 RAM window

		HAVE TO BE CAREFUL!  We always copy 256 bytes for
		simplicity.  If area in RAM > $1700 the copy will
		write out overlapping to $1800 which is where our copy
		starts so it will corrupt things

	Then it swaps in RAM to the lower 2k and decompresses from the
		256 byte RAM to this area

	(ZX02 decompression is described in a bit more detail elsewhere
		in this document)

	Finally the first 16 bytes with level info is copied to the zero
		page

	Why this crazy way of doing things?  Can't have ROM and the larger
		RAM active at same time



Level Data description:
~~~~~~~~~~~~~~~~~~~~~~~
	Offset	Length	Description
	0	1	color of pointer (sprite0)
	1	2	background colors (primary, secondary)
	3	2	x-coord of sprite1 overlay (coarse/fine)
	5	2	x-coord of missile0 overlay (vertical line)
	7	2	XMAX/XMIN of action grab area
	9	2	YMAX/YMIN of action grab area
	12	1	destination if click on forward hand      ($FF=none)
	11	1	destination if click on left-facing hand  ($FF=none)
	13	1	destination if click on right-facing hand ($FF=none)
	14	2	unused for now ($00)

	it's center/left/right rather than l/c/r to save 13 bytes
		in the movement code

	Description of the images:
		standard Atari VCS asymmetric display
		each line:	40 4-pixel wide bytes
				has background and foreground colors
				to save room use 4-line high pixels
				if second background is given, it will
					switch to that color on 2/4 of the lines
					at cycle 60 (X across the screen)
		vertical bar:	optional, full height of screen at
				given co-ords, same color as pointer
		overlay:	one color per line (though black is hard)
				overlays with one more color on top for detail
				best if at least 4 blocks from left of screen

	Images are made in the gimp as a PNG file, separate overlay file,
		then some scripts grab the results

	When uncompressed the data above can be found here:

        level_data              = $1400
        level_colors            = $1410
        level_playfield0_left   = $1440
        level_playfield1_left   = $1470
        level_playfield2_left   = $14A0
        level_playfield0_right  = $14D0
        level_playfield1_right  = $1500
        level_playfield2_right  = $1530
        level_overlay_colors    = $1560
        level_overlay_sprite    = $1590


todo:

	working on kernel for the fireplace puzzle.  Should be doable
		not sure if will be small enough to fit

	working on kernel for the clock puzzle.  Also not sure if
		will fit


Marker Switch Implementation
~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	data:
		8 switches, 1 bit each, stored in SWITCH_STATUS

	switch position:
		it patches the overlay on the fly for different colors
		means switch has to be at same location in all graphics

	marker switch locations are in level LOCATION 0..7 which makes
		implementation slightly easier


Drawing the Pointer
~~~~~~~~~~~~~~~~~~~

	It is sprite0, drawn single-copy quad-size

	By default it's just a hand

	If at left or right edge of screen, and that direction
		is clickable (not $FF) then draw left/right hand

	If there are grab co-ordinates, if in range draw as grab
		special cases currently handle:
			1. Marker switches
			2. Linking books

	If we picked up a page, drawing page over-rides all this
		page color is based on ??




other stuff to describe:
~~~~~~~~~~~~~~~~~~~~~~~~



	book animations

	music/sound




graphics workflow:
~~~~~~~~~~~~~~~~~~

	take screenshot of VGA version with ScummVM

	scale to 320x192

	convert to VCS colormap

	put 40x48 grid on top

	draw over things, careful to have one color per line + overlay
		overlays really shouldn't be within 4 blocks of left side
		of screen

	create separate bg and overlay files, overlay starts 4 blocks to
		the right in PNG as this made coding up the command line
		tool easier

Hooking up a new location
~~~~~~~~~~~~~~~~~~~~~~~~~

	Super labor-intensive.  Have to:
		1. Create an ID for it in locations.inc
		2. Create a wrapper "locations/something.s" file that includes
			the level data
		3. Modify locations/Makefile to run the scripts to extract
			graphics and compress the result
		4. Edit the proper rom_bankX.s file to include the data
		5. Edit load_level.s table to point to the proper 
			bank and address for the level
		6. Rebuild.  I'm missing a dependency in the Makefiles
			somewhere as often you have to make clean / make
			to get it to properly have all the updated files


Fireplace Puzzle
~~~~~~~~~~~~~~~~

original proof of concept:
	fireplace_update	= $A0
	main			= $34
	lookup_table		= $12
	--------------------------------
				= $E6 = 230 bytes

	zero page		= 6+30

	scanlines		= 15+10 = 25

Original solution had the 6 bytes holding the data, but complex code
to split the bit pattern up into the 5 playfield values, and finally
a loop that iterated 30 times to update the whole puzzle field
(with three slow indirect-Y (6 cycles) stores in the inner loop).
Was being clever and moving the stack to point to the data in the zero
page and PLA to auto-increment load.  Very slow.

Thought was to only update the playfield for the block that changed, not
all 30 areas each time.


updated version:

	fireplace_update	= $A0
	main			= $2B	(226-1fb)
	lookup_table		= $12
	--------------------------------
				= $DD = 221 bytes

	zero page		= 6+5 = 11

	scanlines		= 4 + 10 = 14


fireplace puzzle co-ords
~~~~~~~~~~~~~~~~~~~~~~~~
 To position things on screen is difficult.  You set a sprite's X-position
	by writing to a register, but since the TIA clock is 3x the CPU
	clock you can only set this at multiples of 3 (usually if you use
	a loop to do this you can only really do this at 5 cpu cycle
	granularity, or 15 TIA cycle granularity).  You can ajdust after
	the fact to -7/+8.

  Simple code will ``cheat'' and divide by 16 as close enough (easy to do
	with shifts) though it means your position on screen in relation
	to the playfield will be offset a bit from the actual co-ords

  Maybe not a big deal... until the fireplace puzzle and trying to click
	on playfield positions.

  The proper solution is to have a div-15 routine (not easy on 6502).
	There is some code floating around that was reverse-engineered
	from the "river raid" game that is compact and convenient.
