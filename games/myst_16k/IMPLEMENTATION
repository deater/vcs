Writing this up because I took a 1-year break on this and now forgot
how it all works and am having to re-learn my own code.  Fun!

ROM/RAM layout:
~~~~~~~~~~~~~~~

  Mapper:
  ~~~~~~~
	Uses the E7 rom mapper which provices 16K of bank-switched ROM
	and 2k of bank-switched RAM.  Fancy, but there in theory were
	games that used the mapper back in the day.

	$1000-$17FF (2k) is selectable
	$1800-$19FF (512B) is RAM
	$1A00-$1FFF (1.5k) fixed as the last chunk of ROM

	$1FE0 - $1FE6 selects bank 0 through 6 of the ROM into $1000-$17FF
	$1FE7 enables 1K of the 2K RAM, instead
              When RAM, enabled there's 1k available:
                    $1000-$13FF used to write RAM
		    $1400-$17FF used to read RAM

	$1800-$19FF is also RAM (4 banks of 256B)
		$1800-$18FF is write
		$1900-$19FF is read  
	$1FE8 - $1FEB selects which of four 256B banks

   Myst layout:
	ROM BANK0	-- level data
	ROM BANK1	-- level data
	ROM BANK2	-- level data
	ROM BANK3	-- level data
	ROM BANK4	-- level data
	ROM BANK5	-- unused (will be level data)
	ROM BANK6	-- title, intro and books?
	ROM BANK7	-- always mapped, engine and routines

  Having the E7 detected properly by emulators.
	MAME checks for "lda $FFE5" somewhere in code? (double check this)
	I'm setting $E7 in the IRQ vector (for reasons?)


Build Process
~~~~~~~~~~~~~
	Each bank of the ROM built separately.  They all need the origin
		to be $1000 except for the always-there ROM which is at
		$1A00
	Then it is all merged together.  "myst.s" does this by binary
		including the files, including padding for the 512 bytes
		that can't be accessed.  Probably could have written
		a linker script to do this instead.


Decompression:
~~~~~~~~~~~~~~

	Uses ZX02 compression by
		and decompression code by

	Modified, as it takes too long to finish in ZZZ cycles 
		(more than a 60Hz frame) and we're responsible
		for doing the VSYNC and if we don't the display
		glitches).  So we set up a timer to break up
		the decompression across frames so we still sync



Book Implementation:
~~~~~~~~~~~~~~~~~~~~


Level Engine:
~~~~~~~~~~~~~

	Load level routine loads level.  Which level to load is in
		zero page CURRENT_LOCATION
	Source is found by using CURRENT_LOCATION to look up 
		source rom bank and address
	Copies 256 bytes of data (max we allow) to the $1800 RAM window
	Then it swaps in RAM to the lower 2k and decompresses from the
		256 byte RAM to this area
	Finally the first 16 bytes with level info is copied to the zero
		page

	Why this crazy way of doing things?  Can't have ROM and the larger
		RAM active at same time

	Then ZX02 decompression is described in more detail elsewhere

Level Data description:
~~~~~~~~~~~~~~~~~~~~~~~
	Offset	Length	Description
	0	1	color of pointer (sprite0)
	1	2	background colors (primary, secondary)
	3	2	x-coord of sprite1 overlay (coarse/fine)
	5	2	x-coord of missile0 overlay (vertical line)
	7	2	XMAX/XMIN of action grab area
	9	2	YMAX/YMIN of action grab area
	11	1	destination if click on left-facing hand ($FF=none)
	12	1	destination if click on forward hand
	13	1	destination if click on right-fancing hand
	14	2	unused for now ($00)


	Description of the images:
		standard Atari VCS asymmetric display
		each line:	40 4-pixel wide bytes
				has background and foreground colors
				to save room use 4-line high pixels
				if second background is given, it will
					switch to that color on 2/4 of the lines
					at cycle 60 (X across the screen)
		vertical bar:	optional, full height of screen at
				given co-ords, same color as pointer
		overlay:	one color per line (though black is hard)
				overlays with one more color on top for detail
				best if at least 4 blocks from left of screen

	Images are made in the gimp as a PNG file, separate overlay file,
		then some scripts grab the results

	When uncompressed the data above can be found here:

        level_data              = $1400
        level_colors            = $1410
        level_playfield0_left   = $1440
        level_playfield1_left   = $1470
        level_playfield2_left   = $14A0
        level_playfield0_right  = $14D0
        level_playfield1_right  = $1500
        level_playfield2_right  = $1530
        level_overlay_colors    = $1560
        level_overlay_sprite    = $1590




other stuff to describe:


	how does the marker switch clicking work
		it patches the overlay on the fly for different colors
		means switch has to be at same location in all graphics

	book animations

	music/sound


